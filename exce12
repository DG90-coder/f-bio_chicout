#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_PALAVRA 100
#define MAX_TEXTO 10000

typedef struct {
    char palavra[MAX_PALAVRA];
    int frequencia;
} Palavra;

int contar_palavras(char* texto, Palavra palavras[], int* total_distintas) {
    char* token = strtok(texto, " ,.!?\n");
    int total_palavras = 0;
    *total_distintas = 0;

    while (token != NULL) {
        total_palavras++;
        
        // Converter palavra para minúsculas
        for (char* p = token; *p; p++) *p = tolower(*p);
        
        // Verificar se a palavra já está na lista
        int encontrada = 0;
        for (int i = 0; i < *total_distintas; i++) {
            if (strcmp(palavras[i].palavra, token) == 0) {
                palavras[i].frequencia++;
                encontrada = 1;
                break;
            }
        }
        if (!encontrada) {
            strcpy(palavras[*total_distintas].palavra, token);
            palavras[*total_distintas].frequencia = 1;
            (*total_distintas)++;
        }
        
        token = strtok(NULL, " ,.!?\n");
    }
    return total_palavras;
}

int contar_letras(char* palavra) {
    int count = 0;
    while (*palavra) {
        if (isalpha(*palavra)) count++;
        palavra++;
    }
    return count;
}

double calcular_media_letras(Palavra palavras[], int total_distintas) {
    int total_letras = 0;
    for (int i = 0; i < total_distintas; i++) {
        total_letras += contar_letras(palavras[i].palavra) * palavras[i].frequencia;
    }
    return (double)total_letras / total_distintas;
}

char* encontrar_maior_palavra(Palavra palavras[], int total_distintas) {
    char* maior_palavra = palavras[0].palavra;
    for (int i = 1; i < total_distintas; i++) {
        if (strlen(palavras[i].palavra) > strlen(maior_palavra)) {
            maior_palavra = palavras[i].palavra;
        }
    }
    return maior_palavra;
}

char* encontrar_menor_palavra(Palavra palavras[], int total_distintas) {
    char* menor_palavra = palavras[0].palavra;
    for (int i = 1; i < total_distintas; i++) {
        if (strlen(palavras[i].palavra) < strlen(menor_palavra)) {
            menor_palavra = palavras[i].palavra;
        }
    }
    return menor_palavra;
}

char* encontrar_palavra_mais_frequente(Palavra palavras[], int total_distintas) {
    char* mais_frequente = palavras[0].palavra;
    int max_frequencia = palavras[0].frequencia;
    for (int i = 1; i < total_distintas; i++) {
        if (palavras[i].frequencia > max_frequencia) {
            mais_frequente = palavras[i].palavra;
            max_frequencia = palavras[i].frequencia;
        }
    }
    return mais_frequente;
}

char* encontrar_palavra_mais_rara(Palavra palavras[], int total_distintas) {
    char* mais_rara = palavras[0].palavra;
    int min_frequencia = palavras[0].frequencia;
    for (int i = 1; i < total_distintas; i++) {
        if (palavras[i].frequencia < min_frequencia) {
            mais_rara = palavras[i].palavra;
            min_frequencia = palavras[i].frequencia;
        }
    }
    return mais_rara;
}

int main() {
    char texto[MAX_TEXTO] = "Escreva um programa que receba um texto longo uma redacao e que monte uma lista das palavras existentes no texto.";
    Palavra palavras[MAX_PALAVRA];
    int total_distintas;

    int total_palavras = contar_palavras(texto, palavras, &total_distintas);
    printf("Total de palavras: %d\n", total_palavras);
    printf("Total de palavras distintas: %d\n", total_distintas);
    printf("Media de letras por palavra: %.2f\n", calcular_media_letras(palavras, total_distintas));
    printf("Maior palavra: %s\n", encontrar_maior_palavra(palavras, total_distintas));
    printf("Menor palavra: %s\n", encontrar_menor_palavra(palavras, total_distintas));
    printf("Palavra mais frequente: %s\n", encontrar_palavra_mais_frequente(palavras, total_distintas));
    printf("Palavra mais rara: %s\n", encontrar_palavra_mais_rara(palavras, total_distintas));

    return 0;
}

